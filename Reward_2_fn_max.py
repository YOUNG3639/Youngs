import numpy as np


# 인플레이션율
inflation_rate = np.array([
    7.643422, 8.755917, 8.986059, 8.877884, 9.741305, 8.856339, 9.323949, 9.419388, 
    7.152639, 7.005698, 6.028852, 4.737355, 4.625847, 4.678690, 4.434054, 5.458738, 
    6.519653, 5.837591, 6.912941, 5.800605, 4.758882, 4.826918, 3.903785, 4.449258, 
    4.673664, 4.874383, 5.065516, 5.077813, 4.692810, 4.041592, 3.968658, 5.051511, 
    8.934591, 8.171770, 7.031072, 5.973699, 0.708999, 0.594169, 0.651854, 1.296209, 
    1.923421, 1.586993, 2.981707, 2.539978, 3.694487, 5.042809, 4.246131, 3.297529, 
    2.524460, 2.688524, 2.514363, 3.316559, 4.075324, 3.305247, 3.168001, 3.522594, 
    3.246781, 3.410215, 4.331604, 3.370134, 3.250806, 2.977544, 2.336224, 2.462332, 
    2.081389, 2.238585, 2.523900, 2.124841, 2.003180, 2.448947, 2.299826, 3.379060, 
    3.801694, 4.845073, 5.541796, 4.495450, 3.911460, 2.765350, 1.980090, 2.407549, 
    2.983924, 2.663502, 2.873918, 3.234479, 3.838733, 3.981643, 4.315543, 3.963747, 
    3.012184, 2.429132, 1.610372, 1.715957, 1.557701, 1.215215, 1.366212, 1.068619, 
    1.128022, 1.608019, 1.381064, 0.982181, 0.697150, 0.563234, 0.645667, 0.920542, 
    0.859326, 0.840646, 0.735124, 1.451428, 2.199702, 1.921448, 2.218510, 1.441045, 
    1.076691, 1.492170, 1.546318, 1.786975, 0.541741, 0.652200, 0.045261, 0.295617, 
    0.963624, 0.009042, 0.724849, 0.454149, 1.429143, 2.491210, 2.535183, 3.542914
])

# 명목 금리
interest_rate = np.array([
    7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 7.000, 
    5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 
    5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 5.000, 3.000, 3.000, 
    3.000, 3.000, 3.000, 3.000, 5.000, 5.000, 5.000, 5.250, 5.000, 5.000, 4.000, 4.000, 
    4.000, 4.250, 4.250, 4.250, 4.250, 4.000, 3.750, 3.750, 3.750, 3.750, 3.500, 3.250, 
    3.250, 3.250, 3.250, 3.750, 4.000, 4.250, 4.500, 4.500, 4.500, 4.500, 5.000, 5.000, 
    5.000, 5.000, 5.250, 3.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.250, 2.500, 
    3.000, 3.250, 3.250, 3.250, 3.250, 3.250, 3.000, 2.750, 2.750, 2.500, 2.500, 2.500, 
    2.500, 2.500, 2.250, 2.000, 1.750, 1.500, 1.500, 1.500, 1.500, 1.250, 1.250, 1.250, 
    1.250, 1.250, 1.250, 1.500, 1.500, 1.500, 1.500, 1.750, 1.750, 1.750, 1.500, 1.250, 
    0.750, 0.500, 0.500, 0.500, 0.500, 0.500, 0.750, 1.000
])

# 환율
exchange_rate = np.array([
    690.560, 710.260, 715.480, 715.010, 721.570, 725.330, 733.010, 753.040, 766.500, 
    783.310, 787.390, 785.410, 793.940, 799.520, 807.840, 808.890, 809.060, 807.260, 
    803.200, 795.560, 786.310, 763.290, 765.710, 769.300, 783.000, 786.100, 816.860, 
    831.510, 865.320, 891.720, 898.240, 1140.920, 1606.120, 1394.520, 1325.210, 1279.860, 
    1198.680, 1191.410, 1194.160, 1174.460, 1125.410, 1116.290, 1115.270, 1164.110, 
    1271.680, 1305.680, 1293.780, 1291.840, 1319.630, 1270.680, 1196.340, 1220.960, 
    1201.110, 1209.810, 1175.750, 1181.250, 1171.850, 1161.920, 1155.210, 1093.970, 
    1022.480, 1007.960, 1029.190, 1037.000, 977.520, 950.410, 955.020, 938.400, 938.900, 
    929.260, 928.170, 920.590, 955.970, 1016.720, 1062.640, 1362.790, 1415.220, 1288.680, 
    1240.890, 1168.610, 1144.080, 1163.460, 1185.590, 1132.770, 1120.400, 1083.890, 
    1083.040, 1144.750, 1131.470, 1151.810, 1133.540, 1090.860, 1084.080, 1122.150, 
    1112.180, 1062.100, 1069.010, 1030.380, 1025.760, 1086.720, 1100.260, 1097.770, 
    1167.800, 1157.690, 1201.440, 1163.300, 1121.370, 1157.370, 1154.280, 1129.430, 
    1132.240, 1105.720, 1072.290, 1078.570, 1121.590, 1127.520, 1125.080, 1165.910, 
    1193.240, 1175.810, 1193.600, 1220.810, 1188.540, 1117.640, 1114.050, 1121.230, 
    1157.350, 1183.170
])

# 단위당 노동비용 증가율
unit_labor_cost_change = np.array([
    5.815204668, 7.074247686, 7.733419482, 6.139760946, 8.129899885, 7.994266516, 
    6.73590414, 6.868350464, 5.183407428, 4.780261299, 3.52475122, 3.313291358, 
    4.223674349, 5.532291198, 6.448852773, 6.287569548, 5.283000145, 5.064948774, 
    5.398221821, 7.77044735, 6.776782309, 7.005604256, 7.453619989, 5.204326987, 
    6.159674284, 5.801021287, 5.465872305, 5.145936839, 3.133265331, 5.175078293, 
    5.034867247, 4.129533963, 1.327762937, -1.312385622, 0.672162506, 3.053926002, 
    9.788373766, 11.12716983, 8.820893113, 7.3376506, 6.42654912, 4.293250104, 
    5.028339057, 3.456048467, 3.701473835, 2.403816291, 1.556487421, 3.239156162, 
    2.642570888, 4.77504266, 5.794590883, 5.647419546, 3.635196698, 2.766868423, 
    2.675091382, 3.678557417, 3.391206037, 4.432261589, 3.254658899, 1.235287669, 
    2.397591175, 3.124603985, 4.32441768, 4.660430876, 4.82327292, 3.43328583, 
    3.293000086, 3.069342611, 3.14359361, 4.236201396, 3.806606521, 5.292854897, 
    4.298306927, 3.146949773, 2.99044487, -1.941235088, -1.312007653, -0.473636701, 
    1.177192788, 5.332497142, 6.655437554, 5.832312243, 4.170206309, 4.526314548, 
    3.113493363, 1.728158023, 1.375311173, 0.236841112, 0.253504483, 0.623528619, 
    0.468277636, 1.224288173, 1.635813815, 1.997847749, 1.902849834, 1.504443355, 
    0.562821405, 1.25909378, 0.645378348, 0.795933051, 1.170231323, 1.058090206, 
    2.316077622, 2.254585264, 2.161847583, 2.836631127, 1.649289548, 1.54805692, 
    1.905732817, 1.332222306, 2.709669184, 1.824333732, 2.432875677, 2.627370602, 
    2.161528317, 2.909420739, 1.24326425, 1.38733405, 0.724934719, 1.094127448, 
    0.356843132, -1.22697332, 0.292834216, 0.916820931, 3.87487437, 4.072705587, 
    2.023163137, 1.741955003
])

# 실업자 수 증가율
unemployment_change = np.array([
    -1.356081, -8.163662, 1.428216, 0.913788, 3.341082, 2.835107, -1.726078, 1.215580, 
    2.639810, 7.843239, 8.301515, 7.542992, 10.919631, 25.291730, 16.971441, 14.747640, 
    -0.275533, -14.843739, -14.208988, -19.170340, -18.722690, -18.748541, -11.039293, 
    -7.478707, -6.141786, 0.977200, -1.648930, 13.320556, 40.283456, 30.940759, 20.178766, 
    27.439123, 83.567471, 171.191655, 238.971148, 181.623280, 47.286355, 0.870921, -20.091448, 
    -34.508112, -32.378139, -36.238546, -32.103366, -18.824546, -4.237374, -7.283092, 
    -11.142690, -11.098094, -20.804014, -15.238163, -13.858728, -14.371831, -4.925436, 
    8.153150, 16.345057, 22.994064, 9.920696, 4.611435, 3.474767, 0.977988, 5.638839, 
    4.486295, 3.030645, -1.310117, -5.246796, -6.979093, -6.370785, -4.039559, -6.386135, 
    -3.365353, -5.687342, -5.850642, -6.086135, -3.624041, -1.142451, 3.944940, 12.915576, 
    22.061041, 17.851252, 8.837940, 23.174957, -8.948464, -0.815377, -0.468907, -9.351670, 
    -0.275807, -9.412230, -7.238732, -8.304432, -3.342151, -1.846966, -2.233065, -4.735084, 
    -4.634488, 0.297324, 1.921249, 12.397134, 19.759977, 14.838591, 17.418398, 5.599507, 
    5.525748, 5.339647, -0.961174, 5.480260, -1.992905, 6.593001, 3.989839, 1.033789, 
    4.029376, -1.357290, 1.455093, 1.798098, 2.581056, 11.761697, 5.453314, 5.051509, 
    5.965855, -11.183794, -5.799745, -6.422689, 4.459359, 6.783311, 16.522254, 17.761551, 
    -7.818783, -18.864482, -20.827733
])




# 년도와 분기 설정
years = []
start_year = 1990
quarters = ['1Q', '2Q', '3Q', '4Q']

for i in range(len(inflation_rate)):
    year = start_year + i // 4
    quarter = quarters[i % 4]
    years.append(f'{year}/{quarter}')

# 조건을 만족하는 시기를 찾는 함수 정의
def find_periods_for_conditions():
    case_1_periods = []
    case_2_periods = []
    case_3_periods = []
    case_4_periods = []
    case_5_periods = []
    case_6_periods = []

    # t-2부터 비교 시작, 마지막까지 비교 가능
    for t in range(2, len(inflation_rate)):
        # 경우 1: 실업자 수 증가율 하락 & ULC 상승 & 인플레이션율 상승
        if (unemployment_change[t-3] > unemployment_change[t-2] > unemployment_change[t-1] and
            unit_labor_cost_change[t-3] < unit_labor_cost_change[t-2] < unit_labor_cost_change[t-1] and
            inflation_rate[t-3] < inflation_rate[t-2] < inflation_rate[t-1]):
            case_1_periods.append(t)

        # 경우 2: 실업자 수 증가율 상승 & ULC 하락 & 인플레이션율 하락
        if (unemployment_change[t-3] < unemployment_change[t-2] < unemployment_change[t-1] and
            unit_labor_cost_change[t-3] > unit_labor_cost_change[t-2] > unit_labor_cost_change[t-1] and
            inflation_rate[t-3] > inflation_rate[t-2] > inflation_rate[t-1]):
            case_2_periods.append(t)

        # 경우 3: 환율 상승 & ULC 상승 & 인플레이션율 상승
        if (exchange_rate[t-3] < exchange_rate[t-2] < exchange_rate[t-1] and
            unit_labor_cost_change[t-3] < unit_labor_cost_change[t-2] < unit_labor_cost_change[t-1] and
            inflation_rate[t-3] < inflation_rate[t-2] < inflation_rate[t-1]):
            case_3_periods.append(t)

        # 경우 4: 환율 하락 & ULC 하락 & 인플레이션율 하락
        if (exchange_rate[t-3] > exchange_rate[t-2] > exchange_rate[t-1] and
            unit_labor_cost_change[t-3] > unit_labor_cost_change[t-2] > unit_labor_cost_change[t-1] and
            inflation_rate[t-3] > inflation_rate[t-2] > inflation_rate[t-1]):
            case_4_periods.append(t)

        # 경우 5: 환율 상승 & ULC 하락 & 인플레이션율 상승
        if (exchange_rate[t-3] < exchange_rate[t-2] < exchange_rate[t-1] and
            unit_labor_cost_change[t-3] > unit_labor_cost_change[t-2] > unit_labor_cost_change[t-1] and
            inflation_rate[t-3] < inflation_rate[t-2] < inflation_rate[t-1]):
            case_5_periods.append(t)

        # 경우 6: 환율 하락 & ULC 상승 & 인플레이션율 하락
        if (exchange_rate[t-3] > exchange_rate[t-2] > exchange_rate[t-1] and
            unit_labor_cost_change[t-3] < unit_labor_cost_change[t-2] < unit_labor_cost_change[t-1] and
            inflation_rate[t-3] > inflation_rate[t-2] > inflation_rate[t-1]):
            case_6_periods.append(t)

    # 각 경우에 맞는 시기 출력
    def print_case_periods(case_name, periods):
        print(f"{case_name}: 총 {len(periods)}회")
        for t in periods:
            print(f"시기: {years[t-3]} ~ {years[t-1]}")

    print_case_periods("경우 1: 실업자 수 증가율 하락 & ULC 상승 & 인플레이션율 상승", case_1_periods)
    print_case_periods("경우 2: 실업자 수 증가율 상승 & ULC 하락 & 인플레이션율 하락", case_2_periods)
    print_case_periods("경우 3: 환율 상승 & ULC 상승 & 인플레이션율 상승", case_3_periods)
    print_case_periods("경우 4: 환율 하락 & ULC 하락 & 인플레이션율 하락", case_4_periods)
    print_case_periods("경우 5: 환율 상승 & ULC 하락 & 인플레이션율 상승", case_5_periods)
    print_case_periods("경우 6: 환율 하락 & ULC 상승 & 인플레이션율 하락", case_6_periods)

# 조건에 맞는 시기 찾기
find_periods_for_conditions()
